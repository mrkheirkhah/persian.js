{"version":3,"file":"persian.min.modern.js","sources":["../persian.js"],"sourcesContent":["﻿/**\r\n * PersianJs v0.4.0\r\n * https://github.com/usablica/persian.js\r\n * MIT licensed\r\n *\r\n * Copyright (C) 2012 usabli.ca and other contributors\r\n */\r\n(function () {\r\n\r\n    // Default config/variables\r\n    var VERSION = \"0.4.0\",\r\n        // Check for nodeJS\r\n        hasModule = (typeof module !== 'undefined' && module.exports);\r\n\t\r\n\t// Declare Number Arrays in different locales\r\n\tvar arabicNumbers  = [\"١\", \"٢\", \"٣\", \"٤\", \"٥\", \"٦\", \"٧\", \"٨\", \"٩\", \"٠\"],\r\n\t\tpersianNumbers = [\"۱\", \"۲\", \"۳\", \"۴\", \"۵\", \"۶\", \"۷\", \"۸\", \"۹\", \"۰\"], \r\n\t\tenglishNumbers = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"];\r\n       \r\n    // Declare characters to switch between\r\n    var persianChar = [ \"ض\", \"ص\", \"ث\", \"ق\", \"ف\", \"غ\", \"ع\", \"ه\", \"خ\", \"ح\", \"ج\", \"چ\", \"ش\", \"س\", \"ی\", \"ب\", \"ل\", \"ا\", \"ت\", \"ن\", \"م\", \"ک\", \"گ\", \"ظ\", \"ط\", \"ز\", \"ر\", \"ذ\", \"د\", \"پ\", \"و\",\"؟\",\"ئ\" ],\r\n        englishChar = [ \"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\", \"[\", \"]\", \"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \";\", \"'\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \",\",\"?\",\"m\" ];\r\n    \r\n    /**\r\n     * PersianJs main class\r\n     *\r\n     * @class PersianJs\r\n     */\r\n    function PersianJs(str) {\r\n        this._str = str;\r\n    }\r\n\r\n    /**\r\n     * Used for convert Arabic characters to Persian\r\n     *\r\n     * @api private\r\n     * @method _arabicChar\r\n     * @param {String} value\r\n     * @return {Object} PersianJs Object\r\n     */\r\n    function _arabicChar(value) {\r\n        if (!value) {\r\n            return;\r\n        }\r\n        var arabicChars = [\"ي\", \"ك\", \"‍\", \"دِ\", \"بِ\", \"زِ\", \"ذِ\", \"ِشِ\", \"ِسِ\", \"ى\",\"ة\"],\r\n            persianChars = [\"ی\", \"ک\", \"\", \"د\", \"ب\", \"ز\", \"ذ\", \"ش\", \"س\", \"ی\",\"ه\"];\r\n\r\n        for (var i = 0, charsLen = arabicChars.length; i < charsLen; i++) {\r\n            value = value.replace(new RegExp(arabicChars[i], \"g\"), persianChars[i]);\r\n        }\r\n        this._str = value;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Used for convert Persian numbers to English\r\n     * \r\n     * @api private\r\n     * @method _persianNumber\r\n     * @param {String} value\r\n     * @return {Object} PersianJs Object\r\n     */\r\n    function _persianNumber(value) {\r\n        if (!value) {\r\n            return;\r\n        }\r\n    \r\n        for (var i = 0, numbersLen = englishNumbers.length; i < numbersLen; i++) {\r\n            value = value.replace(new RegExp(persianNumbers[i], \"g\"), englishNumbers[i]);\r\n        }\r\n    \r\n        this._str = value;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Used for convert Arabic numbers to Persian\r\n     *\r\n     * @api private\r\n     * @method _arabicNumber\r\n     * @param {String} value\r\n     * @return {Object} PersianJs Object\r\n     */\r\n    function _arabicNumber(value) {\r\n        if (!value) {\r\n            return;\r\n        }\r\n        value=value.toString();\r\n\r\n        for (var i = 0, numbersLen = arabicNumbers.length; i < numbersLen; i++) {\r\n            value = value.replace(new RegExp(arabicNumbers[i], \"g\"), persianNumbers[i]);\r\n        }\r\n        this._str = value;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Used for convert English numbers to Persian\r\n     *\r\n     * @api private\r\n     * @method _englishNumber\r\n     * @param {String} value\r\n     * @return {Object} PersianJs Object\r\n     */\r\n    function _englishNumber(value) {\r\n        if (!value) {\r\n            return;\r\n        }\r\n        value=value.toString();\r\n        var englishNumbers = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"],\r\n            persianNumbers = [\"۱\", \"۲\", \"۳\", \"۴\", \"۵\", \"۶\", \"۷\", \"۸\", \"۹\", \"۰\"];\r\n\r\n        for (var i = 0, numbersLen = englishNumbers.length; i < numbersLen; i++) {\r\n            value = value.replace(new RegExp(englishNumbers[i], \"g\"), persianNumbers[i]);\r\n        }\r\n        this._str = value;\r\n        return this;\r\n    }\r\n    \r\n\t/**\r\n     * Used for convert Persian and Arabic numbers to English string\r\n     *\r\n     * @api private\r\n     * @method _toEnglishNumber\r\n     * @param {String} value \r\n     * @return {Object} PersianJs Object\r\n     */\r\n    function _toEnglishNumber(value) {\r\n        if (!value) {\r\n            return;\r\n        }\r\n        for (var i = 0, numbersLen = englishNumbers.length; i < numbersLen; i++) {\r\n            value = value.replace(new RegExp(persianNumbers[i], \"g\"), englishNumbers[i])\r\n\t\t\t\t\t\t .replace(new RegExp(arabicNumbers[i], \"g\"), englishNumbers[i]);\r\n        }\r\n        this._str = value;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Used for decode Persian Charachters in URL\r\n     * https://fa.wikipedia.org/wiki/مدیاویکی:Gadget-Extra-Editbuttons-Functions.js\r\n     *\r\n     * @api private\r\n     * @method _decodeURL\r\n     * @param {String} value\r\n     * @return {Object} PersianJs Object\r\n     */\r\n    function _decodeURL(value) {\r\n        if (!value) {\r\n            return;\r\n        }\r\n        // Replace every %20 with _ to protect them from decodeURI\r\n        var old = \"\";\r\n        while (old != value) {\r\n            old = value;\r\n            value = value.replace(/(http\\S+?)\\%20/g, '$1\\u200c\\u200c\\u200c_\\u200c\\u200c\\u200c');\r\n        }\r\n        // Decode URIs\r\n        // NOTE: This would convert all %20's to _'s which could break some links\r\n        // but we will undo that later on\r\n        value = value.replace(/(http\\S+)/g, function (s, p) {\r\n            return decodeURI(p);\r\n        });\r\n        // Revive all instances of %20 to make sure no links is broken\r\n        value = value.replace(/\\u200c\\u200c\\u200c_\\u200c\\u200c\\u200c/g, '%20');\r\n        this._str = value;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Used for Change keyboard layout\r\n     *\r\n     * @api private\r\n     * @method _switchKey\r\n     * @param {String} value\r\n     * @return {Object} PersianJs Object\r\n     */\r\n    function _switchKey(value) {\r\n        if (!value) {\r\n            return;\r\n        }\r\n\r\n        for (var i = 0, charsLen = persianChar.length; i < charsLen; i++) {\r\n            value = value.replace(new RegExp(persianChar[i], \"g\"), englishChar[i]);\r\n        }\r\n        this._str = value;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Used for Change keyboard layout back to persian\r\n     *\r\n     * @api private\r\n     * @method _switchKeyBackToPersian\r\n     * @param {String} value\r\n     * @return {Object} PersianJs Object\r\n     */\r\n    function _switchKeyBackToPersian(value) {\r\n        if (!value) {\r\n            return;\r\n        }\r\n\r\n        for (var i = 0, charsLen = englishChar.length; i < charsLen; i++) {\r\n            value = value.replace(new RegExp(englishChar[i], \"g\"), persianChar[i]);\r\n        }\r\n        this._str = value;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Used for get persian words representation of a number\r\n     *\r\n     * @api private\r\n     * @method _digitsToWords\r\n     * @param {String} value\r\n     * @return {Object} PersianJs Object\r\n     */\r\n    function _digitsToWords(value) {\r\n        var delimiter, digit, i, iThree, numbers, parts, result, resultThree, three;\r\n\r\n        if (!isFinite(value)) {\r\n            return '';\r\n        }\r\n\r\n        if (typeof value !== \"string\") {\r\n            value = value.toString();\r\n        }\r\n\r\n        parts = ['', 'هزار', 'میلیون', 'میلیارد', 'تریلیون', 'کوادریلیون', 'کویینتیلیون', 'سکستیلیون'];\r\n        numbers = {\r\n            0: ['', 'صد', 'دویست', 'سیصد', 'چهارصد', 'پانصد', 'ششصد', 'هفتصد', 'هشتصد', 'نهصد'],\r\n            1: ['', 'ده', 'بیست', 'سی', 'چهل', 'پنجاه', 'شصت', 'هفتاد', 'هشتاد', 'نود'],\r\n            2: ['', 'یک', 'دو', 'سه', 'چهار', 'پنج', 'شش', 'هفت', 'هشت', 'نه'],\r\n            two: ['ده', 'یازده', 'دوازده', 'سیزده', 'چهارده', 'پانزده', 'شانزده', 'هفده', 'هجده', 'نوزده'],\r\n            zero: 'صفر'\r\n        };\r\n        delimiter = ' و ';\r\n\r\n        valueParts = value.split('').reverse().join('').replace(/\\d{3}(?=\\d)/g, \"$&,\").split('').reverse().join('').split(',').map(function(str) {\r\n            return Array(4 - str.length).join('0') + str;\r\n        });\r\n\r\n        result = (function() {\r\n            var _results;\r\n            _results = [];\r\n            for (iThree in valueParts) {\r\n                three = valueParts[iThree];\r\n\r\n                resultThree = (function() {\r\n                    var _i, _len, _results1;\r\n                    _results1 = [];\r\n\r\n                    for (i = _i = 0, _len = three.length; _i < _len; i = ++_i) {\r\n                        digit = three[i];\r\n                        if (i === 1 && digit === '1') {\r\n                            _results1.push(numbers.two[three[2]]);\r\n                        } else if ((i !== 2 || three[1] !== '1') && numbers[i][digit] !== '') {\r\n                            _results1.push(numbers[i][digit]);\r\n                        } else {\r\n                            continue;\r\n                        }\r\n                    }\r\n\r\n                    return _results1;\r\n                })();\r\n\r\n                resultThree = resultThree.join(delimiter);\r\n                var _result = resultThree ? resultThree + ' ' + parts[valueParts.length - parseInt(iThree) - 1] : resultThree;\r\n                _results.push(_result);\r\n            }\r\n            return _results;\r\n        })();\r\n\r\n        result = result.filter(function(x) {\r\n            return x.trim() !== '';\r\n        });\r\n\r\n        result = result.join(delimiter).trim();\r\n        if (result === '') {\r\n            result = numbers.zero;\r\n        }\r\n\r\n        this._str = result;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Used for Zero-width non-joiner correction\r\n     *\r\n     * @api private\r\n     * @method _halfSpace\r\n     * @param {string} value\r\n     * @return {object} PersianJs object\r\n     */\r\n    function _halfSpace(value){\r\n        if(!value){\r\n            return;\r\n        }\r\n\r\n        var pattern;\r\n\r\n        // Replace Zero-width non-joiner between persian MI.\r\n        pattern = /((\\s\\u0645\\u06CC)+( )+([\\u0600-\\u06EF]{1,}){1,})/g;\r\n        value = value.replace( new RegExp(pattern), \"$2\\u200C$4\" );\r\n\r\n        // Replace Zero-width non-joiner between perisan De-Yii.\r\n        pattern = /(([\\u0600-\\u06EF]{1,})+( )+(ای|ایی|اند|ایم|اید|ام){1})/g;\r\n        value = value.replace( new RegExp(pattern), \"$2\\u200C$4\" );\r\n\r\n        this._str = value;\r\n        return this;\r\n    }\r\n\r\n    var persianJs = function(inputStr) {\r\n        if (!inputStr || inputStr === \"\") {\r\n            throw new Error(\"Input is null or empty.\");\r\n        }\r\n        return new PersianJs(inputStr);\r\n    };\r\n\r\n    /**\r\n     * Current PersianJs version\r\n     *\r\n     * @property version\r\n     * @type String\r\n     */\r\n    persianJs.version = VERSION;\r\n\r\n    //Prototype\r\n    persianJs.fn = PersianJs.prototype = {\r\n        clone: function () {\r\n            return persianJs(this);\r\n        },\r\n        value: function () {\r\n            return this._str;\r\n        },\r\n        toString: function () {\r\n            return this._str.toString();\r\n        },\r\n        set : function (value) {\r\n            this._str = String(value);\r\n            return this;\r\n        },\r\n        arabicChar: function() {\r\n            return _arabicChar.call(this, this._str);\r\n        },\r\n        persianNumber: function () {\r\n            return _persianNumber.call(this, this._str);\r\n        },\r\n        arabicNumber: function() {\r\n            return _arabicNumber.call(this, this._str);\r\n        },\r\n        englishNumber: function() {\r\n            return _englishNumber.call(this, this._str);\r\n        },\r\n        toEnglishNumber: function() {\r\n            return _toEnglishNumber.call(this, this._str);\r\n        },\r\n        fixURL: function() {\r\n            return _decodeURL.call(this, this._str);\r\n        },\r\n        decodeURL: function() {\r\n            return _decodeURL.call(this, this._str);\r\n        },\r\n        switchKey: function() {\r\n            return _switchKey.call(this, this._str);\r\n        },\r\n        digitsToWords: function() {\r\n            return _digitsToWords.call(this, this._str);\r\n        },\r\n        halfSpace: function(){\r\n            return _halfSpace.call(this, this._str);\r\n        },\r\n        switchKeyBackToPersian: function() {\r\n            return _switchKeyBackToPersian.call(this, this._str);\r\n        }\r\n    };\r\n\r\n    //Expose PersianJs\r\n    //CommonJS module is defined\r\n    if (hasModule) {\r\n        module.exports = persianJs;\r\n    }\r\n    //global ender:false\r\n    if (typeof ender === 'undefined') {\r\n        // here, `this` means `window` in the browser, or `global` on the server\r\n        // add `persianJs` as a global object via a string identifier,\r\n        // for Closure Compiler \"advanced\" mode\r\n        this['persianJs'] = persianJs;\r\n    }\r\n    //global define:false\r\n    if (typeof define === 'function' && define.amd) {\r\n        define('persianJs', [], function () {\r\n            return persianJs;\r\n        });\r\n    }\r\n})();\r\n"],"names":["hasModule","module","exports","arabicNumbers","persianNumbers","englishNumbers","persianChar","englishChar","PersianJs","str","this","_str","_arabicChar","value","arabicChars","persianChars","i","charsLen","length","replace","RegExp","_persianNumber","numbersLen","_arabicNumber","toString","_englishNumber","_toEnglishNumber","_decodeURL","old","s","p","decodeURI","_switchKey","_switchKeyBackToPersian","_digitsToWords","digit","iThree","numbers","parts","result","resultThree","three","isFinite","0","1","2","two","zero","valueParts","split","reverse","join","map","Array","_results","_result","_i","_len","_results1","push","parseInt","filter","x","trim","_halfSpace","pattern","persianJs","inputStr","Error","version","fn","prototype","clone","set","String","arabicChar","call","persianNumber","arabicNumber","englishNumber","toEnglishNumber","fixURL","decodeURL","switchKey","digitsToWords","halfSpace","switchKeyBackToPersian","ender","define","amd"],"mappings":"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"}